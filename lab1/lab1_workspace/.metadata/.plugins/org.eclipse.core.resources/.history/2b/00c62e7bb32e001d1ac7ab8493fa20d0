package tddc17;


import aima.core.environment.liuvacuum.*;

import aima.core.agent.Action;
import aima.core.agent.AgentProgram;
import aima.core.agent.Percept;
import aima.core.agent.impl.*;

import java.util.Random;
import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Set;
import java.util.HashSet;
import java.util.Iterator;

import tddc17.ShortestPath;
import tddc17.Node;

class MyAgentState
{
	public int[][] world = new int[30][30];
	public int initialized = 0;
	final int UNKNOWN 	= 0;
	final int WALL 		= 1;
	final int CLEAR 	= 2;
	final int DIRT		= 3;
	final int HOME		= 4;
	final int ACTION_NONE 			= 0;
	final int ACTION_MOVE_FORWARD 	= 1;
	final int ACTION_TURN_RIGHT 	= 2;
	final int ACTION_TURN_LEFT 		= 3;
	final int ACTION_SUCK	 		= 4;
	
	public int agent_x_position = 1;
	public int agent_y_position = 1;
	public int agent_last_action = ACTION_NONE;
	
	public static final int NORTH = 0;
	public static final int EAST = 1;
	public static final int SOUTH = 2;
	public static final int WEST = 3;
	public int agent_direction = EAST;
	
	MyAgentState()
	{
		for (int i=0; i < world.length; i++)
			for (int j=0; j < world[i].length ; j++)
				world[i][j] = UNKNOWN;
		world[1][1] = HOME;
		agent_last_action = ACTION_NONE;
	}
	// Based on the last action and the received percept updates the x & y agent position
	public void updatePosition(DynamicPercept p)
	{
		Boolean bump = (Boolean)p.getAttribute("bump");

		if (agent_last_action==ACTION_MOVE_FORWARD && !bump)
	    {
			switch (agent_direction) {
			case MyAgentState.NORTH:
				agent_y_position--;
				break;
			case MyAgentState.EAST:
				agent_x_position++;
				break;
			case MyAgentState.SOUTH:
				agent_y_position++;
				break;
			case MyAgentState.WEST:
				agent_x_position--;
				break;
			}
	    }
		
	}
	
	public void updateWorld(int x_position, int y_position, int info)
	{
		world[x_position][y_position] = info;
	}
	
	public void printWorldDebug()
	{
		for (int i=0; i < world.length; i++)
		{
			for (int j=0; j < world[i].length ; j++)
			{
				if (world[j][i]==UNKNOWN)
					System.out.print(" ? ");
				if (world[j][i]==WALL)
					System.out.print(" # ");
				if (world[j][i]==CLEAR)
					System.out.print(" . ");
				if (world[j][i]==DIRT)
					System.out.print(" D ");
				if (world[j][i]==HOME)
					System.out.print(" H ");
			}
			System.out.println("");
		}
	}
}

class MyAgentProgram implements AgentProgram {
	private Queue<ArrayList<Integer>> q = new LinkedList<ArrayList<Integer>>();
	private ArrayList<Integer> goal_square = new ArrayList<>();
	Set<Node> nodes = new HashSet<Node>();
	Set<Node> visited_nodes = new HashSet<Node>();
	
	
	private int initnialRandomActions = 1;
	private Random random_generator = new Random();
	
	// Here you can define your variables!
	public int iterationCounter = 10000;
	public MyAgentState state = new MyAgentState();
	
	// moves the Agent to a random start position
	// uses percepts to update the Agent position - only the position, other percepts are ignored
	// returns a random action
	private Action moveToRandomStartPosition(DynamicPercept percept) {
		int action = random_generator.nextInt(6);
		initnialRandomActions--;
		state.updatePosition(percept);
		if(action==0) {
		    state.agent_direction = ((state.agent_direction-1) % 4);
		    if (state.agent_direction<0) 
		    	state.agent_direction +=4;
		    state.agent_last_action = state.ACTION_TURN_LEFT;
			return LIUVacuumEnvironment.ACTION_TURN_LEFT;
		} else if (action==1) {
			state.agent_direction = ((state.agent_direction+1) % 4);
		    state.agent_last_action = state.ACTION_TURN_RIGHT;
		    return LIUVacuumEnvironment.ACTION_TURN_RIGHT;
		} 
		state.agent_last_action=state.ACTION_MOVE_FORWARD;
		return LIUVacuumEnvironment.ACTION_MOVE_FORWARD;
	}
	
	
	@Override
	public Action execute(Percept percept) {
		
		// DO NOT REMOVE this if condition!!!
    	if (initnialRandomActions>0) {
    		return moveToRandomStartPosition((DynamicPercept) percept);
    	} else if (initnialRandomActions==0) {
    		// process percept for the last step of the initial random actions
    		initnialRandomActions--;
    		state.updatePosition((DynamicPercept) percept);
			System.out.println("Processing percepts after the last execution of moveToRandomStartPosition()");
			
			
			for(int x: Arrays.asList(1,-1)) {
				ArrayList<Integer> temp = new ArrayList<>();
    			temp.add(state.agent_x_position + x);
    			temp.add(state.agent_y_position);
    			if(!q.contains(temp)) {
    				q.add(temp);
    			}
    		}
    		
    		for(int y: Arrays.asList(1,-1)) {
    			ArrayList<Integer> temp = new ArrayList<>();
    			temp.add(state.agent_x_position);
    			temp.add(state.agent_y_position + y);
    			if(!q.contains(temp)) {
    				q.add(temp);
    			}
    		}
    		
    		System.out.println("Initial Q: " + q);
    		
			state.agent_last_action=state.ACTION_SUCK;
	    	return LIUVacuumEnvironment.ACTION_SUCK;
    	}
		
    	// This example agent program will update the internal agent state while only moving forward.
    	// START HERE - code below should be modified!
    	    	
    	System.out.println("x=" + state.agent_x_position);
    	System.out.println("y=" + state.agent_y_position);
    	System.out.println("dir=" + state.agent_direction);
    	
		
	    iterationCounter--;
	    
	    if (iterationCounter==0) {
	    	System.out.println("Limit exceeded!");
	    	return NoOpAction.NO_OP;
	    }

	    DynamicPercept p = (DynamicPercept) percept;
	    Boolean bump = (Boolean)p.getAttribute("bump");
	    Boolean dirt = (Boolean)p.getAttribute("dirt");
	    Boolean home = (Boolean)p.getAttribute("home");
	    System.out.println("percept: " + p);
	    
	    // State update based on the percept value and the last action
	    state.updatePosition((DynamicPercept)percept);
	    if (bump) {
			switch (state.agent_direction) {
			case MyAgentState.NORTH:
				state.updateWorld(state.agent_x_position,state.agent_y_position-1,state.WALL);
				break;
			case MyAgentState.EAST:
				state.updateWorld(state.agent_x_position+1,state.agent_y_position,state.WALL);
				break;
			case MyAgentState.SOUTH:
				state.updateWorld(state.agent_x_position,state.agent_y_position+1,state.WALL);
				break;
			case MyAgentState.WEST:
				state.updateWorld(state.agent_x_position-1,state.agent_y_position,state.WALL);
				break;
			}
	    }
	    if (dirt)
	    	state.updateWorld(state.agent_x_position,state.agent_y_position,state.DIRT);
	    else
	    	state.updateWorld(state.agent_x_position,state.agent_y_position,state.CLEAR);
	    
	    state.printWorldDebug();
	    
	    
	    // Next action selection based on the percept value
	    if (dirt)
	    {
	    	System.out.println("DIRT -> choosing SUCK action!");
	    	state.agent_last_action=state.ACTION_SUCK;
	    	return LIUVacuumEnvironment.ACTION_SUCK;
	    } 
	    else
	    {
	    	System.out.println("Queue is " + q);
	    	
	    	if(home && q.isEmpty() && !bump && goal_square.get(0) == 1 && goal_square.get(1) == 1 ) {
	    		state.agent_last_action=state.ACTION_NONE;
		    	return NoOpAction.NO_OP;
	    	}
	    	else if(!home && q.isEmpty() && goal_square.get(0) == 1 && goal_square.get(1) == 1 && !bump) {
	    		System.out.println("Queue is empty!");
	    		ArrayList<Integer> home_Coordinates = new ArrayList<>();
    			home_Coordinates.add(1);
    			home_Coordinates.add(1);
    			goal_square = home_Coordinates;
    			Integer next_movement = findNextMovement(goal_square);
	    		System.out.println("Next goal square:" + goal_square);
	    		
	    		return determine_next_action(next_movement);
	    	}
	    	
	    	if (bump)
	    	{
	    		System.out.println("Bump");
	    		Integer bumpX = 0;
	    		Integer bumpY = 0;
	    		switch (state.agent_direction) {
				case MyAgentState.NORTH:
					bumpX = state.agent_x_position;
					bumpY = state.agent_y_position - 1;
					removeNode(state.agent_x_position, state.agent_y_position-1);
					break;
				case MyAgentState.EAST:
					bumpX = state.agent_x_position + 1;
					bumpY = state.agent_y_position;
					removeNode(state.agent_x_position + 1, state.agent_y_position);
					break;
				case MyAgentState.SOUTH:
					bumpX = state.agent_x_position;
					bumpY = state.agent_y_position + 1;
					removeNode(state.agent_x_position ,state.agent_y_position+1);
					break;
				case MyAgentState.WEST:
					bumpX = state.agent_x_position - 1;
					bumpY = state.agent_y_position;
					removeNode(state.agent_x_position - 1, state.agent_y_position);
					break;
				}
	    		
	    		
	    		System.out.println("goal is "+ goal_square);
	    		if(!q.isEmpty() && goal_square.get(0) == bumpX && goal_square.get(1) == bumpY ) {
	    			System.out.println("Q is not empty!");
	    			goal_square = q.remove();
	    			System.out.println("Removing from Q 1");
		    		
		    		if(goal_square.get(0) == state.agent_x_position && goal_square.get(1) == state.agent_y_position && !q.isEmpty()) {
		    			goal_square = q.remove();
		    			System.out.println("Removing from Q 2");
		    		}
	    		}
	    		else if(q.isEmpty() && !(goal_square.get(0) == 1 && goal_square.get(1) == 1)) {
	    			// time to find a path home
	    			System.out.println("Q is empty and goal in not home");
	    			ArrayList<Integer> home_Coordinates = new ArrayList<>();
	    			home_Coordinates.add(1);
	    			home_Coordinates.add(1);
	    			goal_square = home_Coordinates;
	    		}
//	    		
	    		return test();
//	    		
//	    		Integer next_movement = findNextMovement(goal_square);
//	    		System.out.println("Next goal square:" + goal_square);
//	    		
//	    		return determine_next_action(next_movement);
	    		
	    	}
	    	else
	    	{	    		
//	    		if(q.isEmpty()) {
//	    			System.out.println("Queue is empty!");
//	    			ArrayList<Integer> home_Coordinates = new ArrayList<>();
//	    			home_Coordinates.add(1);
//	    			home_Coordinates.add(1);
//	    			
//	    			if(state.agent_x_position != home_Coordinates.get(0) && state.agent_y_position != home_Coordinates.get(1)) {
//	    				goal_square = home_Coordinates;
//	    				Integer next_movement = findNextMovement(goal_square);
//	    				return determine_next_action(next_movement);	    				
//	    			}
//	    			return NoOpAction.NO_OP;
//		    		
//	    		}
	    		return test();
	    		
	    		
	    	}
	    }
	}
	
	private Integer findNextMovement(ArrayList<Integer> goal_square) {
		// Find a path to goal and tell me where to go (up, right, down or left?)
		// Finding shortest path with help of BFS
		
		// finding the goal node in graph
		Node goal_node = null;
		for(Node node: nodes) {
			if(node.getX() == goal_square.get(0) && node.getY() == goal_square.get(1)) {
				goal_node = node;
				break;
			}
		}
		
		//System.out.println("Current is (" + state.agent_x_position+ ", " + state.agent_y_position + ")" );
		Node current_node = null;
		for(Node node: nodes) {
			if(node.getX() == state.agent_x_position && node.getY() == state.agent_y_position) {
				current_node = node;
				break;
			}
		}
		System.out.println("Current is " + current_node);
		System.out.println("Goal is " + goal_node);
		
//		System.out.println("");
//		System.out.println("Graph representation");
//		System.out.println("====================");
//		
//		for(Node node: nodes) {
//			System.out.println(node + " :");
//			for(Node n: node.neighbors) {
//				System.out.println("Neighbor is " + n);
//			}
//		}
//		System.out.println("");
		
//		for(Node n: current_node.neighbors) {
//			System.out.println("(" + n.getX()+ ", " + n.getY()+ ")" );
//		}
		
		List<Node> route = new ShortestPath(current_node, goal_node).bfs();

		
		if(route.isEmpty()) {
			System.out.println("No path found!");
			return MyAgentState.NORTH;
		}
		
		
		Node next_node = route.get(1);
		System.out.println("Next square towards the goal square is >>" + next_node);
		
		if(next_node.getX() < state.agent_x_position) {
			return MyAgentState.WEST;
		}
		else if(next_node.getX() > state.agent_x_position) {
			return MyAgentState.EAST;
		}
		else if(next_node.getY() < state.agent_y_position) {
			return MyAgentState.NORTH;
		}
		else {
			return MyAgentState.SOUTH;
		}
		
	}
	
    private Node hasNode(Node node){
		for(Node n: nodes){
		    if(n.getX() == node.getX() && n.getY() == node.getY()){
		    	return n;
		    }
		}
		return null;
    }
    
    private Action determine_next_action(Integer next_movement) {
    	if(next_movement == MyAgentState.NORTH) {
			
			switch (state.agent_direction) {
			case MyAgentState.NORTH:
				System.out.println("direction is north Should go forword");
				state.agent_last_action=state.ACTION_MOVE_FORWARD;
				return LIUVacuumEnvironment.ACTION_MOVE_FORWARD;
			case MyAgentState.EAST:
				System.out.println("direction is east Should turn left");
				state.agent_direction = MyAgentState.NORTH;
				state.agent_last_action=state.ACTION_TURN_LEFT;
				return LIUVacuumEnvironment.ACTION_TURN_LEFT;
			case MyAgentState.SOUTH:
				System.out.println("direction is south Should turn left");
				state.agent_direction = MyAgentState.EAST;
				state.agent_last_action=state.ACTION_TURN_LEFT;
				return LIUVacuumEnvironment.ACTION_TURN_LEFT;
			case MyAgentState.WEST:
				System.out.println("direction is west Should turn right");
				state.agent_direction = MyAgentState.NORTH;
				state.agent_last_action=state.ACTION_TURN_RIGHT;
				return LIUVacuumEnvironment.ACTION_TURN_RIGHT;
			}
		}
		else if(next_movement == MyAgentState.EAST) {
			
			switch (state.agent_direction) {
			case MyAgentState.NORTH:
				System.out.println("direction is north Should turn right");
				state.agent_direction = MyAgentState.EAST;
				state.agent_last_action=state.ACTION_TURN_RIGHT;
				return LIUVacuumEnvironment.ACTION_TURN_RIGHT;
			case MyAgentState.EAST:
				System.out.println("direction is east Should go forward");
				state.agent_last_action=state.ACTION_MOVE_FORWARD;
				return LIUVacuumEnvironment.ACTION_MOVE_FORWARD;
			case MyAgentState.SOUTH:
				System.out.println("direction is south Should turn left");
				state.agent_direction = MyAgentState.EAST;
				state.agent_last_action=state.ACTION_TURN_LEFT;
				return LIUVacuumEnvironment.ACTION_TURN_LEFT;
			case MyAgentState.WEST:
				System.out.println("direction is west Should turn left");
				state.agent_direction = MyAgentState.SOUTH;
				state.agent_last_action=state.ACTION_TURN_LEFT;
				return LIUVacuumEnvironment.ACTION_TURN_LEFT;
			}
		}
		else if(next_movement == MyAgentState.SOUTH) {
			
			switch (state.agent_direction) {
			case MyAgentState.NORTH:
				System.out.println("direction is north Should turn right");
				state.agent_direction = MyAgentState.EAST;
				state.agent_last_action=state.ACTION_TURN_RIGHT;
				return LIUVacuumEnvironment.ACTION_TURN_RIGHT;
			case MyAgentState.EAST:
				System.out.println("direction is east Should turn right");
				state.agent_direction = MyAgentState.SOUTH;
				state.agent_last_action=state.ACTION_TURN_RIGHT;
				return LIUVacuumEnvironment.ACTION_TURN_RIGHT;
			case MyAgentState.SOUTH:
				System.out.println("direction is south Should go forward");
				state.agent_last_action=state.ACTION_MOVE_FORWARD;
				return LIUVacuumEnvironment.ACTION_MOVE_FORWARD;
			case MyAgentState.WEST:
				System.out.println("direction is west Should turn left");
				state.agent_direction = MyAgentState.SOUTH;
				state.agent_last_action=state.ACTION_TURN_LEFT;
				return LIUVacuumEnvironment.ACTION_TURN_LEFT;
			}
		}
		else if(next_movement == MyAgentState.WEST) {
			
			switch (state.agent_direction) {
			case MyAgentState.NORTH:
				System.out.println("direction is north Should turn left");
				state.agent_direction = MyAgentState.WEST;
				state.agent_last_action=state.ACTION_TURN_LEFT;
				return LIUVacuumEnvironment.ACTION_TURN_LEFT;
			case MyAgentState.EAST:
				System.out.println("direction is east Should turn left");
				state.agent_direction = MyAgentState.NORTH;
				state.agent_last_action=state.ACTION_TURN_LEFT;
				return LIUVacuumEnvironment.ACTION_TURN_LEFT;
			case MyAgentState.SOUTH:
				System.out.println("direction is south Should turn right");
				state.agent_direction = MyAgentState.WEST;
				state.agent_last_action=state.ACTION_TURN_RIGHT;
				return LIUVacuumEnvironment.ACTION_TURN_RIGHT;
			case MyAgentState.WEST:
				System.out.println("direction is west Should go forward");
				state.agent_last_action=state.ACTION_MOVE_FORWARD;
				return LIUVacuumEnvironment.ACTION_MOVE_FORWARD;
			}
		}
		
		return NoOpAction.NO_OP;
    }
    
    private void removeNode(Integer x, Integer y) {
    	Iterator<Node> itr = nodes.iterator();
    	while (itr.hasNext()) {
    		// Remove this bump square from nodes
			Node n = (Node)itr.next();
			if (n.getX() == x && n.getY() == y){
				System.out.println("Removing (" + x + ", " + y + ")");
				itr.remove();
				
			}
         }
    	
    	Iterator<Node> itr2 = nodes.iterator();
    	while (itr2.hasNext()) {
    		Node node = (Node)itr2.next();
    		Iterator<Node> itr3 = node.neighbors.iterator();
        	while (itr3.hasNext()) {
        		// Remove this bump square from all nodes in which this square is a neighbor to
    			Node n = (Node)itr3.next();
    			if (n.getX() == x && n.getY() == y){
    				System.out.println("(" + x + ", " + y + ") was neighbor to (" + node.getX() + ", " + node.getY() + ")");
    				itr3.remove();
    				break;
    			}
             }
         }
    }
    
    private Action test() {
    	// Adding all neighbor (which are not added yet) of current square to the queue 
		for(int x: Arrays.asList(1,-1)) {
			ArrayList<Integer> temp = new ArrayList<>();
			temp.add(state.agent_x_position + x);
			temp.add(state.agent_y_position);
			boolean has_visited = false;
			for(Node node: visited_nodes) {
				if(node.getX() == state.agent_x_position + x && node.getY() == state.agent_y_position) {
					has_visited = true;
					break;
				}
			}
			if(!has_visited) {
				visited_nodes.add(new Node(Arrays.asList(state.agent_x_position + x, state.agent_y_position)));
				q.add(temp);
			}
		}
		
		for(int y: Arrays.asList(1,-1)) {
			ArrayList<Integer> temp = new ArrayList<>();
			temp.add(state.agent_x_position);
			temp.add(state.agent_y_position + y);
			boolean has_visited = false;
			for(Node node: visited_nodes) {
				if(node.getX() == state.agent_x_position && node.getY() == state.agent_y_position + y) {
					has_visited = true;
					break;
				}
			}
			if(!has_visited) {
				visited_nodes.add(new Node(Arrays.asList(state.agent_x_position, state.agent_y_position + y)));
				q.add(temp);
			}
		}
		
		// Create a new node if it is not already exist and connecting its all neighbors (north, east, south and west)
		Node new_node = new Node(Arrays.asList(state.agent_x_position , state.agent_y_position));
		Node existing_node = hasNode(new_node);
		Node temp_node = null;
		
		if(existing_node != null) {
			temp_node = existing_node;
		}
		else {
			temp_node = new_node;
			nodes.add(temp_node);
		}
		
		for(int x: Arrays.asList(1,-1)) {
			Node temp1 = new Node(Arrays.asList(state.agent_x_position + x, state.agent_y_position));
			Node existing_neighbor = hasNode(temp1);
			
			if(existing_neighbor == null) {
				nodes.add(temp1);
				temp_node.add_neighbor(temp1);
			}else {
				temp_node.add_neighbor(existing_neighbor);
			}
		}
		
		for(int y: Arrays.asList(1,-1)) {
			Node temp2 = new Node(Arrays.asList(state.agent_x_position, state.agent_y_position + y));
			Node existing_neighbor = hasNode(temp2);
			
			if(existing_neighbor == null) {
				nodes.add(temp2);
				temp_node.add_neighbor(temp2);
			}
			else {
				temp_node.add_neighbor(existing_neighbor);
			}
		}    		
		
		if(goal_square.isEmpty() || goal_square.equals(Arrays.asList(state.agent_x_position, state.agent_y_position))) {
//			if(goal_square.isEmpty()) {
//				System.out.println("goal square is empty");
//			}
//			if(goal_square.equals(Arrays.asList(state.agent_x_position, state.agent_y_position))) {
//				System.out.println("My current position is goal square");
//				System.out.println("My current position (" + state.agent_x_position + ", " +  state.agent_y_position + ")");
//				System.out.println("My goal position (" + goal_square.get(0) + ", " +  goal_square.get(1) + ")");
//			}
			System.out.println("Now i reached the goal square");
			goal_square = q.remove();
			System.out.println("Removing from Q");
			System.out.println("Next goal square is: " + goal_square);
		}
		
		Integer next_movement = findNextMovement(goal_square);
		
		
		return determine_next_action(next_movement);
    	
    }
	
}



public class MyVacuumAgent extends AbstractAgent {
    public MyVacuumAgent() {
    	super(new MyAgentProgram());
	}
}



